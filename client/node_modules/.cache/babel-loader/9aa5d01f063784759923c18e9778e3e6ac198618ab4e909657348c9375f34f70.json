{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useMutation } from 'react-query';\nimport api from '../services/api';\nexport const useFileUpload = () => {\n  _s();\n  const [uploadState, setUploadState] = useState({});\n  const uploadMutation = useMutation(async file => {\n    setUploadState(prev => ({\n      ...prev,\n      [file.name]: {\n        progress: 0,\n        error: null\n      }\n    }));\n    try {\n      const result = await api.uploadFile(file);\n      setUploadState(prev => ({\n        ...prev,\n        [file.name]: {\n          progress: 100,\n          error: null\n        }\n      }));\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      setUploadState(prev => ({\n        ...prev,\n        [file.name]: {\n          progress: 0,\n          error: errorMessage\n        }\n      }));\n      throw error;\n    }\n  });\n  return {\n    uploadFile: uploadMutation.mutate,\n    uploadState,\n    isUploading: uploadMutation.isLoading,\n    reset: () => setUploadState({})\n  };\n};\n_s(useFileUpload, \"OHjjQKnhvHTCfK9p1O42khFjsIY=\", false, function () {\n  return [useMutation];\n});\nexport default useFileUpload;","map":{"version":3,"names":["useState","useMutation","api","useFileUpload","_s","uploadState","setUploadState","uploadMutation","file","prev","name","progress","error","result","uploadFile","errorMessage","Error","message","mutate","isUploading","isLoading","reset"],"sources":["/Volumes/workspace/Field of work/APARAVI2/client/src/hooks/useFileUpload.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useMutation } from 'react-query';\nimport api from '../services/api';\n\ninterface FileUploadState {\n  progress: number;\n  error: string | null;\n}\n\nexport const useFileUpload = () => {\n  const [uploadState, setUploadState] = useState<Record<string, FileUploadState>>({});\n\n  const uploadMutation = useMutation(\n    async (file: File) => {\n      setUploadState((prev) => ({\n        ...prev,\n        [file.name]: { progress: 0, error: null },\n      }));\n      \n      try {\n        const result = await api.uploadFile(file);\n        setUploadState((prev) => ({\n          ...prev,\n          [file.name]: { progress: 100, error: null },\n        }));\n        return result;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n        setUploadState((prev) => ({\n          ...prev,\n          [file.name]: { progress: 0, error: errorMessage },\n        }));\n        throw error;\n      }\n    }\n  );\n\n  return {\n    uploadFile: uploadMutation.mutate,\n    uploadState,\n    isUploading: uploadMutation.isLoading,\n    reset: () => setUploadState({}),\n  };\n};\n\nexport default useFileUpload; "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,GAAG,MAAM,iBAAiB;AAOjC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAkC,CAAC,CAAC,CAAC;EAEnF,MAAMO,cAAc,GAAGN,WAAW,CAChC,MAAOO,IAAU,IAAK;IACpBF,cAAc,CAAEG,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACD,IAAI,CAACE,IAAI,GAAG;QAAEC,QAAQ,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAK;IAC1C,CAAC,CAAC,CAAC;IAEH,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMX,GAAG,CAACY,UAAU,CAACN,IAAI,CAAC;MACzCF,cAAc,CAAEG,IAAI,KAAM;QACxB,GAAGA,IAAI;QACP,CAACD,IAAI,CAACE,IAAI,GAAG;UAAEC,QAAQ,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAK;MAC5C,CAAC,CAAC,CAAC;MACH,OAAOC,MAAM;IACf,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,MAAMG,YAAY,GAAGH,KAAK,YAAYI,KAAK,GAAGJ,KAAK,CAACK,OAAO,GAAG,eAAe;MAC7EX,cAAc,CAAEG,IAAI,KAAM;QACxB,GAAGA,IAAI;QACP,CAACD,IAAI,CAACE,IAAI,GAAG;UAAEC,QAAQ,EAAE,CAAC;UAAEC,KAAK,EAAEG;QAAa;MAClD,CAAC,CAAC,CAAC;MACH,MAAMH,KAAK;IACb;EACF,CACF,CAAC;EAED,OAAO;IACLE,UAAU,EAAEP,cAAc,CAACW,MAAM;IACjCb,WAAW;IACXc,WAAW,EAAEZ,cAAc,CAACa,SAAS;IACrCC,KAAK,EAAEA,CAAA,KAAMf,cAAc,CAAC,CAAC,CAAC;EAChC,CAAC;AACH,CAAC;AAACF,EAAA,CAlCWD,aAAa;EAAA,QAGDF,WAAW;AAAA;AAiCpC,eAAeE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}